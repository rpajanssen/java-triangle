<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.abnamro.coesd.javatriangle</groupId>
        <artifactId>exceptionhandling-examples</artifactId>
        <version>1.0.0</version>
    </parent>

    <artifactId>exceptionhandling-examples-after</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>exception-handling-examples-after</name>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20200518</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>${validation-api.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate-version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator-annotation-processor</artifactId>
            <version>${hibernate-version}</version>
        </dependency>

        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
        </dependency>

        <dependency>
            <groupId>com.github.database-rider</groupId>
            <artifactId>rider-spring</artifactId>
            <version>${rider-spring.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- START - swagger requirements -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.10.5</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.10.5</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-bean-validators</artifactId>
            <version>2.10.5</version>
        </dependency>
        <!-- END - swagger requirements -->

        <!-- JUnit 5 -->
        <!--
            Note: observe that we do not separately define de api, engine, params dependencies. We import the
            aggregator! It was a nice idea though :(.

            Note: if we use Jupiter 5.5.0 with the separate dependencies the build will fail which can only be solved
            by adding a dependency on org.junit.platform:junit-platform-commons as well.
        -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- START spring cloud contract test dependencies -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-contract-verifier</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>io.rest-assured</groupId>
                    <artifactId>rest-assured</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.rest-assured</groupId>
                    <artifactId>spring-mock-mvc</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-contract-wiremock</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- END spring cloud contract test dependencies -->

        <!-- since we use the JAXRSCLIENT option for SpringCloudContract we need to import a JaxRS client -->
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-client</artifactId>
            <version>3.6.2.Final</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot-maven-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire.maven.plugin.version}</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
                <executions>
                    <execution>
                        <id>unit-tests</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skipTests>false</skipTests>
                            <includes>
                                <include>**/*Test.java</include>
                            </includes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>integration-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skipTests>false</skipTests>
                            <excludes>
                                <exclude>none</exclude>
                            </excludes>
                            <includes>
                                <include>**/*IT.java</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
                CDC: This plugin is responsible for generating and running the tests given the contracts.
            -->
            <plugin>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-contract-maven-plugin</artifactId>
                <version>${spring-cloud-contract.version}</version>
                <extensions>true</extensions>
                <configuration>
                    <testFramework>JUNIT5</testFramework>
                    <!--
                        CDC: Specify the test-method used by the generated test. Default is MOCKMVC. Other options are:
                        WEBTESTCLIENT, JAXRSCLIENT, EXPLICIT. You can not have one set of test using mocking and another
                        set of test using the web-test client since you can only specify this setting once for the whole
                        project/module!

                        In this project we also want to verify the behavior of servlet filters so we can't use MOCKMVC!
                        Using the JX-RS Client the filters will be executed and we can write tests for them. We can also
                        cleanup the pom a lot by excluding all rest-assureed dependencies anf we don't have to worry
                        anymore about mistakes made in the Spring BOM regarding these dependencies. We only need to add
                        one rest-easy client dependency and modify our base test classes to instantiate a WebTarget.
                    -->
                    <testMode>JAXRSCLIENT</testMode>

                    <!--
                        CDC: To bind the contracts to an abstract test-class that sets up the wiring we have three
                        different options. The first one is the one we use in this example, and that is association
                        by name conventions. With the packageWithBaseClasses-property we configure the base package
                        were (all) our abstract test-classes can be found. The contracts are read from the
                        "/resources/contracts" folder and the subfolder structure the contracts are in define the name
                        of the abstract test-class to be used. As example we have a subfolder structure of "person"
                        that holds our contracts, then the base class that will be used is PersonBase.
                     -->
                    <packageWithBaseClasses>com.example.exceptionhandling.cloudcontracts</packageWithBaseClasses>

                    <!--
                        CDC: Option two. If you have a small application with just on rest-resource (or a limited amount of
                        resources that all require the same base test class) then one base test class will suffice and
                        we can use the baseClassForTests-property to configure it.
                    -->
                    <!-- baseClassForTests>com.example.exceptionhandling.cloudcontracts.PersonMockedBase</baseClassForTests-->

                    <!--
                        CDC: The third option is to configure a base test class to be use per contract package using
                        a regular expression defining the package. This option is used if you need multiple base
                        test classes and want configuration over convention (option one).
                     -->
                    <!--baseClassMappings>
                        <baseClassMapping>
                            <contractPackageRegex>.*person.*</contractPackageRegex>
                            <baseClassFQN>com.example.exceptionhandling.cloudcontracts.PersonMockedBase</baseClassFQN>
                        </baseClassMapping>
                    </baseClassMappings-->
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
