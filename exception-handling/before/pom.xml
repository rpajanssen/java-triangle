<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
			<groupId>com.abnamro.coesd.javatriangle</groupId>
			<artifactId>exceptionhandling-examples</artifactId>
			<version>1.0.0</version>
	</parent>

	<artifactId>exceptionhandling-examples-before</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>exception-handling-examples-before</name>
  <packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>11</java.version>

        <spring-boot.version>2.3.0.RELEASE</spring-boot.version>
        <spring-cloud.version>Hoxton.SR5</spring-cloud.version>
        <spring-cloud-contract.version>2.2.3.RELEASE</spring-cloud-contract.version>

        <rest-assured.version>3.3.0</rest-assured.version>
        <junit.jupiter.version>5.5.0</junit.jupiter.version>
        <rider-spring.version>1.7.2</rider-spring.version>

        <spring.fox.version>2.9.2</spring.fox.version>

        <surefire.maven.plugin.version>2.22.2</surefire.maven.plugin.version> <!-- 3.0.0-M4 -->

        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
	</properties>

	<dependencyManagement>
		<dependencies>
            <!-- START dependency management for Spring Boot -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-contract-dependencies</artifactId>
                <version>${spring-cloud-contract.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- END dependency management for Spring Boot -->
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.rest-assured</groupId>
                    <artifactId>rest-assured</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.rest-assured</groupId>
                    <artifactId>rest-assured-common</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>2.0.1.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>6.1.5.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator-annotation-processor</artifactId>
            <version>6.1.5.Final</version>
        </dependency>

		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
		</dependency>

        <dependency>
            <groupId>com.github.database-rider</groupId>
            <artifactId>rider-spring</artifactId>
            <version>${rider-spring.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- START - swagger requirements -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${spring.fox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${spring.fox.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-bean-validators</artifactId>
            <version>${spring.fox.version}</version>
        </dependency>
        <!-- END - swagger requirements -->

        <!-- JUnit 5 -->
        <!--
            Note: observe that we do not separately define de api, engine, params dependencies. We import the
            aggregator! It was a nice idea though :(.

            Note: if we use Jupiter 5.5.0 with the separate dependencies the build will fail which can only be solved
            by adding a dependency on org.junit.platform:junit-platform-commons as well.
        -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- START spring cloud contract test dependencies -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-contract-verifier</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>io.rest-assured</groupId>
                    <artifactId>rest-assured</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.rest-assured</groupId>
                    <artifactId>rest-assured-common</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-contract-wiremock</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- END spring cloud contract test dependencies -->

        <!-- START rest-assured dependencies -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured-common</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- todo : these two dependencies are required because of error in spring-boot bom -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-path</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>xml-path</artifactId>
            <version>${rest-assured.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- END rest-assured dependencies -->
    </dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
			</plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire.maven.plugin.version}</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
                <executions>
                    <execution>
                        <id>unit-tests</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skipTests>false</skipTests>
                            <includes>
                                <include>**/*Test.java</include>
                            </includes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>integration-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skipTests>false</skipTests>
                            <excludes>
                                <exclude>none</exclude>
                            </excludes>
                            <includes>
                                <include>**/*IT.java</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
                CDC: This plugin is responsible for generating and running the tests given the contracts.
            -->
            <plugin>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-contract-maven-plugin</artifactId>
                <version>${spring-cloud-contract.version}</version>
                <extensions>true</extensions>
                <configuration>
                    <testFramework>JUNIT5</testFramework>
                    <!--
                        CDC: Specify the test-method used by the generated test. Default is MOCKMVC. Other options are:
                        WEBTESTCLIENT, JAXRSCLIENT, EXPLICIT. You can not have one set of test using mocking and another
                        set of test using the web-test client since you can only specify this setting once for the whole
                        project/module!

                        In this project we do have mocked and wired generated test, while using the default MOCKMVC
                        test-method. We implemented a base test class that wires the complete app and then passes the
                        application context to springs RestAssuredMockMvc to make all the beans available to the mocked
                        environment of the generated tests. Note that this NOT how you should be doing it!
                    -->
                    <testMode>MOCKMVC</testMode>

                    <!--
                        CDC: To bind the contracts to an abstract test-class that sets up the wiring we have three
                        different options. The first one is the one we use in this example, and that is association
                        by name conventions. With the packageWithBaseClasses-property we configure the base package
                        were (all) our abstract test-classes can be found. The contracts are read from the
                        "/resources/contracts" folder and the subfolder structure the contracts are in define the name
                        of the abstract test-class to be used. As example we have a subfolder structure of "person/mocked"
                        that holds our contracts, then the base class that will be used is PersonMockedBase.

                        Note that normally you won't have a "mocked" or  "wired" folder, we have these just to be
                        able to show you how you can have a mocked and/or wired test.
                     -->
                    <packageWithBaseClasses>com.example.exceptionhandling.cloudcontracts</packageWithBaseClasses>

                    <!--
                        CDC: Option two. If you have a small application with just on rest-resource (or a limited amount of
                        resources that all require the same base test class) then one base test class will suffice and
                        we can use the baseClassForTests-property to configure it.
                    -->
                    <!-- baseClassForTests>com.example.exceptionhandling.cloudcontracts.PersonMockedBase</baseClassForTests-->

                    <!--
                        CDC: The third option is to configure a base test class to be use per contract package using
                        a regular expression defining the package. This option is used if you need multiple base
                        test classes and want configuration over convention (option one).
                     -->
                    <!--baseClassMappings>
                        <baseClassMapping>
                            <contractPackageRegex>.*person.*</contractPackageRegex>
                            <baseClassFQN>com.example.exceptionhandling.cloudcontracts.PersonMockedBase</baseClassFQN>
                        </baseClassMapping>
                    </baseClassMappings-->
                </configuration>
            </plugin>
		</plugins>
	</build>
</project>
